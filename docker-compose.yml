# Docs ########################################################################
# https://github.com/nextcloud/docker

# Volumes #####################################################################
volumes:

  # Comment out and use code below to use a bind mount for data folder
  nextcloud_data:
    # external: true

  # Use this, if using bind mount
  # nextcloud_data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: "${PWD}/data"

  nextcloud_db_data:
    # external: true

  certs:
  acme:
  vhost.d:
  html:

# Networks ####################################################################
networks:
  net:
    driver: bridge
    attachable: true
  # Uncomment, if imaginary stack should be used (see imaginary.yml)
  # img:
  #   name: imaginary_imaginary
  #   external: true
  proxy-tier:


# Services ####################################################################
services:

  # web -----------------------------------------------------------------------
  web:
    build: ./web
    pull_policy: always
    restart: unless-stopped
    volumes_from:
      - app:z,ro
    # volumes:
    #   - nextcloud:/var/www/html:z,ro
    #   # NOTE: The `volumes` included here should match those of the `app` container (unless you know what you're doing)
    environment:
      - VIRTUAL_HOST=${TLS_DOMAINS:?TLS_DOMAINS not set}
      - LETSENCRYPT_HOST=${TLS_DOMAINS:?TLS_DOMAINS not set}
      - LETSENCRYPT_EMAIL=${ADMIN_EMAIL:?ADMIN_EMAIL not set}
    depends_on:
      - app
    networks:
      - proxy-tier
      - net
    logging:
      options:
        max-size: ${DOCKER_LOGGING_MAX_SIZE:?DOCKER_LOGGING_MAX_SIZE not set}
        max-file: ${DOCKER_LOGGING_MAX_FILE:?DOCKER_LOGGING_MAX_FILE not set}
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "127.0.0.1:2019/metrics"]
  #     interval: 10s
  #     retries: 3
  #     start_period: 5s
  #     timeout: 5s

  # proxy ---------------------------------------------------------------------
  proxy:
    build: ./proxy
    pull_policy: always
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"
    volumes:
      - certs:/etc/nginx/certs:z,ro
      - vhost.d:/etc/nginx/vhost.d:z
      - html:/usr/share/nginx/html:z
      - /var/run/docker.sock:/tmp/docker.sock:z,ro
    networks:
      - proxy-tier
    logging:
      options:
        max-size: ${DOCKER_LOGGING_MAX_SIZE:?DOCKER_LOGGING_MAX_SIZE not set}
        max-file: ${DOCKER_LOGGING_MAX_FILE:?DOCKER_LOGGING_MAX_FILE not set}
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "127.0.0.1:2019/metrics"]
  #     interval: 10s
  #     retries: 3
  #     start_period: 5s
  #     timeout: 5s


  # letsencrypt-companion -----------------------------------------------------
  letsencrypt-companion:
    image: nginxproxy/acme-companion
    pull_policy: always
    restart: unless-stopped
    volumes:
      - certs:/etc/nginx/certs:z
      - acme:/etc/acme.sh:z
      - vhost.d:/etc/nginx/vhost.d:z
      - html:/usr/share/nginx/html:z
      - /var/run/docker.sock:/var/run/docker.sock:z,ro
    environment:
      - DEFAULT_EMAIL=${ADMIN_EMAIL:?ADMIN_EMAIL not set}
    networks:
      - proxy-tier
    depends_on:
      - proxy
    logging:
      options:
        max-size: ${DOCKER_LOGGING_MAX_SIZE:?DOCKER_LOGGING_MAX_SIZE not set}
        max-file: ${DOCKER_LOGGING_MAX_FILE:?DOCKER_LOGGING_MAX_FILE not set}
    # healthcheck:
    #   test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "127.0.0.1:2019/metrics"]
    #   interval: 10s
    #   retries: 3
    #   start_period: 5s
    #   timeout: 5s

  # Postgres ------------------------------------------------------------------
  db:
    image: postgres:${POSTGRES_VERSION:?POSTGRES_VERSION not set}
    pull_policy: always
    restart: unless-stopped
    networks:
      - net
    volumes:
      - nextcloud_db_data:/var/lib/postgresql/data
    # ports:
    #  - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:?POSTGRES_USER not set} -d ${POSTGRES_DB:?POSTGRES_DB not set}"]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s
    logging:
      options:
        max-size: ${DOCKER_LOGGING_MAX_SIZE:?DOCKER_LOGGING_MAX_SIZE not set}
        max-file: ${DOCKER_LOGGING_MAX_FILE:?DOCKER_LOGGING_MAX_FILE not set}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:?POSTGRES_DB not set}
      POSTGRES_USER: ${POSTGRES_USER:?POSTGRES_USER not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD not set}
    # psql performance tuning: https://pgtune.leopard.in.ua/
    # command:
      #  postgres
      #  -c max_connections=50
      #  -c shared_buffers=2GB
      #  -c effective_cache_size=6GB
      #  -c maintenance_work_mem=512MB
      #  -c checkpoint_completion_target=0.9
      #  -c wal_buffers=16MB
      #  -c default_statistics_target=100
      #  -c random_page_cost=1.1
      #  -c effective_io_concurrency=200
      #  -c work_mem=20971kB
      #  -c min_wal_size=1GB
      #  -c max_wal_size=4GB
      #  -c max_worker_processes=4
      #  -c max_parallel_workers_per_gather=2
      #  -c max_parallel_workers=4
      #  -c max_parallel_maintenance_workers=2

  # Redis ---------------------------------------------------------------------
  redis:
    image: redis:alpine
    pull_policy: always
    networks:
      - net
    restart: unless-stopped
    logging:
      options:
        max-size: ${DOCKER_LOGGING_MAX_SIZE:?DOCKER_LOGGING_MAX_SIZE not set}
        max-file: ${DOCKER_LOGGING_MAX_FILE:?DOCKER_LOGGING_MAX_FILE not set}
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s

  # Nextcloud -----------------------------------------------------------------
  app:
    image: nextcloud:${NEXTCLOUD_VERSION}
    pull_policy: always
    build:
      context: nextcloud
      args:
        NEXTCLOUD_VERSION: ${NEXTCLOUD_VERSION:?NEXTCLOUD_VERSION not set}
      no_cache: true
    networks:
      - net
      # - img
    restart: unless-stopped
    volumes:
      - nextcloud_data:/var/www/html
    tmpfs:
      - /tmp:exec
    environment:
      NEXTCLOUD_TRUSTED_DOMAINS: ${TRUSTED_DOMAINS:?TRUSTED_DOMAINS not set}
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER:?NEXTCLOUD_ADMIN_USER not set}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD:?NEXTCLOUD_ADMIN_PASSWORD not set}
      REDIS_HOST: redis
      POSTGRES_HOST: db
      POSTGRES_DB: ${POSTGRES_DB:?POSTGRES_DB not set}
      POSTGRES_USER: ${POSTGRES_USER:?POSTGRES_USER not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD not set}
      PHP_MEMORY_LIMIT: ${PHP_MEMORY_LIMIT:?PHP_MEMORY_LIMIT not set}
      TZ: 'Europe/Berlin'
    env_file:
      - nextcloud.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      proxy:
        condition: service_started
    logging:
      options:
        max-size: ${DOCKER_LOGGING_MAX_SIZE:?DOCKER_LOGGING_MAX_SIZE not set}
        max-file: ${DOCKER_LOGGING_MAX_FILE:?DOCKER_LOGGING_MAX_FILE not set}
    healthcheck:
      test: 'runuser -s /usr/local/bin/php - www-data /var/www/html/occ status 2>/dev/null | grep -e "installed: true" -e "maintenance: false" -e "needsDbUpgrade: false" | wc -l | [ "`cat`" = "3" ]'
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s

  # Cron ----------------------------------------------------------------------
  cron:
    image: nextcloud:${NEXTCLOUD_VERSION}
    build:
      context: nextcloud
      args:
        NEXTCLOUD_VERSION: ${NEXTCLOUD_VERSION:?NEXTCLOUD_VERSION not set}
      no_cache: true
    networks:
      - net
      # - img
    restart: unless-stopped
    volumes_from:
      - app
    tmpfs:
      - /tmp:exec
    entrypoint: /cron.sh
    environment:
      PHP_MEMORY_LIMIT: ${PHP_MEMORY_LIMIT:?PHP_MEMORY_LIMIT not set}
    env_file:
      - nextcloud.env
    depends_on:
      db:
        condition: service_healthy
      app:
        condition: service_started
      redis:
        condition: service_started
    logging:
      options:
        max-size: ${DOCKER_LOGGING_MAX_SIZE:?DOCKER_LOGGING_MAX_SIZE not set}
        max-file: ${DOCKER_LOGGING_MAX_FILE:?DOCKER_LOGGING_MAX_FILE not set}
    healthcheck:
      test: 'runuser -s /usr/local/bin/php - www-data /var/www/html/occ status 2>/dev/null | grep -e "installed: true" -e "maintenance: false" -e "needsDbUpgrade: false" | wc -l | [ "`cat`" = "3" ]'
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s

  # go-vod ----------------------------------------------------------------------
  # go-vod:
  #   hostname: go-vod
  #   image: radialapps/go-vod
  #   restart: unless-stopped
  #   networks:
  #     - net
  #   environment:
  #     - NEXTCLOUD_HOST=https://${DOMAIN:?DOMAIN not set}
  #     # - NEXTCLOUD_ALLOW_INSECURE=1 # (self-signed certs or no HTTPS)
  #     - NVIDIA_VISIBLE_DEVICES=all
  #   devices:
  #     - /dev/dri:/dev/dri # VA-API (omit for NVENC)
  #   volumes:
  #     - nextcloud_data:/var/www/html:ro
  #   tmpfs:
  #     - /tmp:exec
  #   # runtime: nvidia # (NVENC)
  #   depends_on:
  #     app:
  #       condition: service_started
  #   logging:
  #     options:
  #       max-size: ${DOCKER_LOGGING_MAX_SIZE:?DOCKER_LOGGING_MAX_SIZE not set}
  #       max-file: ${DOCKER_LOGGING_MAX_FILE:?DOCKER_LOGGING_MAX_FILE not set}
